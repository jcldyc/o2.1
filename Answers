3.8 Exercise: Process Chains

1) Run Program 3.1 and observe the results for different numbers of  processes.
	
	It seemed that more processes would start up when there was less orphaned processes.  The processes outputted
	as expected as well and were easy to read. 

2) Fill in the  actual process IDs of the processes in the diagram of Figure 3.2 for
	a run with command-line argument value of  4.

	i:1 process ID: 18339 parent ID: 18078 child ID: 18340
	i:2 process ID: 18340 parent ID: 1     child ID: 18341
	i:3 process ID: 18341 parent ID: 18340 child ID: 18342
	i:4 process ID: 18342 parent ID: 18341 child ID: 0

	18339 --> 18340 --> 18341 --> 18342 

	i:2's parent ID is 1 because i:2 is now an orphan.  This means the parent terminated without waiting for it's child.  This process is called init and has a process ID equal to 1.  i:1's parent ID is 18078.  
	

3) Experiment with different values for  the command-line argument to find  out the  largest
	number  of processes that the program can generate.  Observe the fraction that 
	are adopted by init.
	
	simplechain 50:
		Round 1: 12 children were orphaned and adopted by init
		Round 2: 18 children were orphaned and adopted by init
		Round 3: 18 children were orphaned and adopted by init
		
	simplechain 100:
		Round 1: 29 children were orphaned and adopted by init
		Round 2: 36 children were orphaned and adopted by init


	So far, the largestnumber of processes that the program can generate is 76,505.
	Running it a few more times and I was able to 100,000.
	I'm  going to try running it with an argument of 300,000 to see if it will make  it.
		- I was able to make it to 156,000 processes trying this

	After running this ~50 times, the highest amount of processes I was able to generate was 156,000 as 
		stated previously when running with an arg 300,000.
		

4) Place sleep(10); directly before the final fprintf statement in Program 3.1.  What is  
	the  maximum number of of processes generated in this case?

	The maximum number processes I could get generated was 21.  I ran it about 30 times and it was the same every time at 21 processes.


5) Put a loop around the final fprintf in Program 3.1.  Have the loop execute k times.
	Put sleep(m); inside  this loop after the fprintf.  Pass k and m on the command 
	line.  Run the program for several values of  n, k and m.  Observe the results.
	
	The most processes I could get to start was 26.  As it looped, the amount of processes would vary between 25
	and 26.  

6) Modify Program 3.1 by putting a wait function call before the final fprintf statement.
	How does this affect the  ouput of the  program.
	
	When I ran this over and over again, I was only able to get 26 processes to start max.  It also causes the 
	first child ID to be -1.  The processes were, in a visual sense, outputted in a reverse order compared to 
	3.1 original.  The wait function allowed the child processes to finish before the parent process terminated
	and caused the child to become an orphan. 

7) Modify Program 3.1 by replacing the final fprintf statement with four fprintf statements,
	one each for the four integers displayed.  Only the  last one should output a 
	newline.  What ahppens when you  run the  program?  Can you  tell which process 
	generated each part of the output?  Run the program several times and see if there
	is a difference in the output.
	
	When you run the program almost  all of the parent ID's are 1. 
	
	1) Prints the iteration
	2) Prints process ID
	3) Prints parent ID 	//which is now 1, meaning the parent process terminated
	4) Prints child ID 	
	
	So after each \n, the parent process is terminating and then causing the next line to show the parent in
	that zombie state.  
	
	You can read the output and see each processes child and the childs parent. After running the 
	program many times, it didn't  seem to change much at all for the 

8) Modify Program 3.1 by replacing the final fprintf statement with a loop that reads
	nchars characters from standard input, one character at a time, and puts them in 
	an array  called mybuf.  The values of n and nchars should  be  passed as command-line 
	arguments.  After the  loop, put a '\0' character in entry nchars of the array so that 
	it contains a string in mybuf.  Run the program for several values of n and nchars.  
	Observe the results.  Press the return key often and continue typing at the keyboard 
	until all of the processes have exited.
